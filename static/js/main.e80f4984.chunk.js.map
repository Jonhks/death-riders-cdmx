{"version":3,"sources":["utils/constants.js","components/Splash.jsx","components/Login.jsx","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["RUTAS","Splash","className","onClick","window","location","hash","FormStyled","styled","div","Login","Form","Group","controlId","Label","Control","type","placeholder","Text","Button","variant","App","basename","exact","path","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.e80f4984.chunk.js","sourcesContent":["export const RUTAS = {\n  inicio: '/',\n  login: '/login',\n  perfil: '/perfil',\n  registro: '/registro',\n  miembros: '/miembros',\n  reglamento: '/reglamento',\n}","import React from 'react';\n\n\nconst Splash = () => {\n\n\t// setTimeout(() => {\n\t// \twindow.location.hash = '/login';\n\t// }, 3000);\n\n\tconst changeView = () => {\n\t\twindow.location.hash = '/login';\n\t}\n\treturn (\n\t\t<div\n\t\t\tclassName=\"splash\"\n\t\t\tonClick={changeView}\n\t\t></div>\n\t)\n}\n\nexport default Splash;","import {Form, Button} from 'react-bootstrap';\nimport '../sass/Login.sass';\nimport styled from 'styled-components';\n\nconst Login = () => {\n  return (\n    <div className=\"fondo\">\n      <FormStyled>\n        <Form className =\"form\">\n          <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\n            <Form.Label>Email address</Form.Label>\n            <Form.Control type=\"email\" placeholder=\"Enter email\" />\n            <Form.Text className=\"text\">\n              We'll never share your email with anyone else.\n            </Form.Text>\n          </Form.Group>\n\n          <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\n            <Form.Label>Password</Form.Label>\n            <Form.Control type=\"password\" placeholder=\"Password\" />\n          </Form.Group>\n          <Button variant=\"secondary\" type=\"submit\" className=\"button-login\">\n            Login\n          </Button>\n        </Form>\n      </FormStyled>\n    </div>\n  );\n}\n\nconst FormStyled = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(0,0,0, .7);\n  color: white;\n  text-align: center;\n  width: 35%;\n  height: 50vh;\n  @media (max-width: 800px) {\n    width: 80%;\n    height: 50vh;\n  }\n`\n\nexport default Login;","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  HashRouter,\n  Route\n} from \"react-router-dom\";\nimport { RUTAS } from './utils/constants';\n\nimport Splash from './components/Splash';\nimport Login from './components/Login';\n\nconst App = () => {\n  return (\n    <HashRouter basename='/'>\n      <div>\n        <Switch>\n          <Route exact path={RUTAS.inicio}>\n            <Splash />\n          </Route>\n          <Route exact path={RUTAS.login}>\n            <Login />\n          </Route>\n          <Route exact path={RUTAS.perfil}>\n            perfil\n          </Route>\n          <Route exact path={RUTAS.registro}>\n            registro\n          </Route>\n          <Route exact path={RUTAS.miembros}>\n            miembros\n          </Route>\n          <Route exact path={RUTAS.reglamento}>\n          reglamento\n          </Route>\n          <Route path=\"*\">\n            404\n          </Route>\n        </Switch>\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}